<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:twaver="http://www.servasoftware.com/2009/twaver/flex"
				xmlns:servasoftware="http://www.servasoftware.com/2009/twaver/flex"
				creationComplete="initApp()" fontSize="12" fontFamily="宋体" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import common.actionscript.MyPopupManager;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import sourceCode.packGraph.model.*;
			import sourceCode.packGraph.views.*;
			import sourceCode.sysGraph.views.CarryOpera;
			
			import twaver.*;
			import twaver.Constant;
			import twaver.DataBox;
			import twaver.ElementBox;
			import twaver.network.Network;
			private var logicPort:LogicPort;
			private var box:ElementBox;	
			private var hbox_id:String,hbox_id_2:String,network_id:String;
			private var opticalPortArray:ArrayCollection; 
			public var XMLData:XML;	
			[Embed(source="assets/images/equipPack/vc0.jpg")]
			public static const vc0:Class;
			
			[Embed(source="assets/images/equipPack/vc4.jpg")]
			public static const vc4:Class;
			
			[Embed(source="assets/images/equipPack/vc_footbg.jpg")]
			public static const vc_foobg:Class;
			[Embed(source="assets/images/equipPack/vc_use_bg.png")]
			public static const vc_use_bg:Class;
			
			[Bindable]
			public var cm:ContextMenu;
			private var c_x:int = 0, c_y:int = 0; // 系统初始化坐标
			private var count_sys:int = 0; // 初始化系统个数
			private var systemArray:Array = new Array();
			private var itemAlarm:equipPackalarm;//告警页面
			private var duanKouProperties : viewEquipPackDuanKouPropertiesInfo;//属性
			
			public var equipcode:String ="";
			public var frameserial:String ="";//机框序号
			public var slotserial:String ="";//机槽序号
			public var packserial:String ="";//机盘序号
			public var x_capability:String ="";//速率
			
			
			private var curIndex:int = 0;
			private var count:int = 0;
			private var port:portList;
			
			private var arrRate:Array = [];
			private var arrAllvc:Array = [];
			private var arrLogicport:Array = [];
			
			private var curChildIndex:int;
			private var curPortList:portList;
			
			public function get dataBox():DataBox{
				return box; 
			}
			
			private function initApp():void{
				
				
				//注册图片
				Utils.registerImageByClass("vc0", vc0);
				Utils.registerImageByClass("vc4", vc4);
				Utils.registerImageByClass("vc_use_bg", vc_use_bg);
				Utils.registerImageByClass("vc_foobg", vc_foobg);
				//显示光口图
				SerializationSettings.registerGlobalClient("flag", Consts.TYPE_STRING);
				SerializationSettings.registerGlobalClient("portcode", Consts.TYPE_STRING);
				SerializationSettings.registerGlobalClient("VC4", Consts.TYPE_STRING);
				SerializationSettings.registerGlobalClient("hasCC", Consts.TYPE_STRING);
				var rtobj:RemoteObject = new RemoteObject("equipPack");
				rtobj.endpoint = ModelLocator.END_POINT;
				rtobj.showBusyCursor = true;
				rtobj.getOpticalPortList(equipcode,frameserial,slotserial,packserial);//获取光口显示列表
				rtobj.addEventListener(ResultEvent.RESULT,opticalPortList_reusultHandel);
				
				cm  = new ContextMenu();
				cm.hideBuiltInItems(); 
				var contextMenuItem:ContextMenuItem = new ContextMenuItem("查看属性",true);
				contextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, ContexMenuItemSelect);
				cm.customItems.push(contextMenuItem);
				var contextMenuItem:ContextMenuItem = new ContextMenuItem("查看端口承载业务");
				contextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, handlerContextMenuCarryOpera);
				cm.customItems.push(contextMenuItem);
			}  
			
			
			
			private function addPortList():void{
				count = opticalPortArray.length;
				//光口列表
				var labelText:String = "";//Label标签显示内容
				var logicport:String;//逻辑端口编码
				if(curIndex < count){
					labelText = opticalPortArray[curIndex].logicportname;
					labelText += " " + opticalPortArray[curIndex].systemcode;

					port = new portList();
					box = new ElementBox();
					
					box.layerBox.defaultLayer.movable = false;//设置图不能移动
					box.layerBox.defaultLayer.editable = false;//设置图不能编辑
					
					port.box = box;

					port.label_text = labelText;
					
					logicport = opticalPortArray[curIndex].logicport;
					var isExists:Boolean = false;
					for(var i:int = 0;i < arrLogicport.length; i++){
						if(arrLogicport[i] == logicport){
							isExists = true;
							break;
						}
					}
					if(!isExists)
						arrLogicport.push(logicport);

					panel.addChild(port);
					port.addEventListener("BtnClick",showPort);
					
					var rtobj1:RemoteObject = new RemoteObject("equipPack");
					rtobj1.endpoint = ModelLocator.END_POINT;
					rtobj1.showBusyCursor = true;
					rtobj1.getOpticalPortDetail(equipcode,logicport);//获取光口显示列表
					preGetopticalPortDetail(rtobj1,labelText,port,logicport);
				}
			}
			
			private function isIn(arr:Array,str:String):Boolean{
				for each(var value:String in arr){
					if(value == str)
						return true;
				}
				return false;
			}
			
			private function opticalPortList_reusultHandel(event:ResultEvent):void{
				opticalPortArray = (ArrayCollection)(event.result);
				var opticalPortCount:int = opticalPortArray.length;//光口数量
				arrRate = [];
				arrAllvc = [];
				addPortList();
				//显示光口图
				var port:portList;//光口列表
				var labelText:String = "";//Label标签显示内容
				var logicport:String;//逻辑端口编码
			}
			
			
			
			//增加事件监听
			private function preGetopticalPortDetail(rtobj:RemoteObject,labelText:String,port:portList,logicport:String):void{
				rtobj.addEventListener(ResultEvent.RESULT,function (e:ResultEvent){getopticalPortDetail(e,labelText,port,logicport)});
			}
			//给label赋值
			private function getopticalPortDetail(e:ResultEvent,labelText:String,port:portList,logicport:String):void{
				var opticalPortDetail:OpticalPortDetail = (OpticalPortDetail)(e.result);
				var rate:String = opticalPortDetail.rate;//时隙使用率
				if(rate == "    .00%") {
					rate = "      0%";
				}
				labelText += "" + rate;
				
				port.label_text = labelText;
				var allvc4:int = Number(opticalPortDetail.allvc4);//VC4个数
				
				arrRate.push(rate);
				arrAllvc.push(allvc4);
				
				curIndex ++;
				addPortList();
			}
			
			
			//显示时隙信息
			private function showPort(event:Event):void{
				curChildIndex = panel.getChildIndex(portList(event.target));
				curPortList = portList(event.target);
				if(curPortList.network_id.visible==false){
					var rtobj3:RemoteObject = new RemoteObject("equipPack");
					rtobj3.endpoint = ModelLocator.END_POINT;
					rtobj3.showBusyCursor = true;
					rtobj3.getOpticalPortStatus(arrLogicport[curChildIndex]);//获取光口占用状态
					rtobj3.addEventListener(ResultEvent.RESULT,function (e:ResultEvent) {opticalPortStatus_reusultHandel(e,arrAllvc[curChildIndex],arrLogicport[curChildIndex])});	
			  }
			}
			
			private function opticalPortStatus_reusultHandel(e:ResultEvent,allvc4:int,logicport:String):void{
				var opticalPortStatusArray:ArrayCollection = (ArrayCollection)(e.result);						
				//100% 一个VC4占100%,
				//x%   多个VC12组成一个VC4
				//0%   没有占用情况
				 drawGrid(allvc4,logicport);	
				 
				 var xCount:int;//行数
				 var yCount:int;//列数	
				 
				 var rowCount:int = 1;//grid行数
				 var columnCount:int = 1;//grid列数
					
					var opticalPortStatus:OpticalPortStatus;//占用光口状态信息	
					if(opticalPortStatusArray.length > 0){
						
						var vc4_num:String,vc12_num:String;//VC4序号,VC12序号 
						var rate:String,aptp:String,aslot:String,circuitcode:String; //速率，a、z端
						var ii:int,jj:int;
						var flag:int = 0;//
						var aslotCount:Number = opticalPortStatusArray.length;//占用数量
						var temp_num:int;//VC12数
										
						var  arr:Array=[];//VC4数组
						var aslot_temp:int;//VC4数组下标
						//置初始值为0
						for(var i:int = 0;i < allvc4;i++){
							arr[i] = 0;
						}
						for each (opticalPortStatus in opticalPortStatusArray){
							rate = opticalPortStatus.rate;
							aptp = opticalPortStatus.aptp;
							aslot = opticalPortStatus.aslot;
							
							if(rate == "VC12"){
								aslot_temp = (int(aslot) - 1)/63;
								arr[aslot_temp] += 1; 
							}
							
							
						}
						for(var t:int = 0;t < allvc4;t++){
							if(arr[t] > 0&&(arr[t] < 63)){	
								vc4_num = logicport+"VC4-" + t;//VC4序号 
								//根据id获取VC4
								var vc4_tmp:String = "VC4-"+(t+1);
								var grid1:Grid = curPortList.network_id.elementBox.getElementByID(vc4_num) as Grid;
								var tempPercent:String = (arr[t]/63*100).toString().split('.')[0]+"%";//时隙使用率
								var tempRate:String = arr[t] + "/63";
									//.toFixed(0).toString()) + "%";//时隙使用率
								var vc_use:String = logicport + "vc_use" + t;//时隙使用率序号
								var follower_t:Follower = curPortList.network_id.elementBox.getElementByID(vc_use) as Follower;
								follower_t.name = follower_t.name.substr(0,6);
								follower_t.name += tempPercent;
								follower_t.name += " ";
								follower_t.name += tempRate;
								
								//生成63个VC12
								rowCount = 7;
								columnCount = 9;
								//设置grid的行列数为7*9
								grid1.setStyle(Styles.GRID_ROW_COUNT, rowCount);
								grid1.setStyle(Styles.GRID_COLUMN_COUNT, columnCount);
								grid1.setStyle(Styles.GRID_PADDING,5);
								
								drawFollower(rowCount,columnCount,grid1,vc4_num,logicport,vc4_tmp);
							}
							if(arr[t] == 63){
								var followerNum:String;//图片vc0序号
								followerNum = logicport + "vc0" + t;
								var followerTem:Follower = curPortList.network_id.elementBox.getElementByID(followerNum) as Follower;
								followerTem.image = "vc4";
								followerTem.setClient("flag","VC4$100");
								followerTem.setClient("portcode",logicport);
								followerTem.setClient("VC4",t+1);
								var vc_Use:String = logicport + "vc_use" + t;//时隙使用率序号
								var followerTt:Follower = curPortList.network_id.elementBox.getElementByID(vc_Use) as Follower;
								followerTt.name = followerTt.name.substr(0,6);
								followerTt.name += "100%";
							}
						}
						
						for each (opticalPortStatus in opticalPortStatusArray){
							rate = opticalPortStatus.rate;
							aptp = opticalPortStatus.aptp;
							aslot = opticalPortStatus.aslot;
							circuitcode = opticalPortStatus.circuitcode;
								if(rate == "VC12"){
									aslot_temp = (int(aslot) - 1)/63;									
									vc4_num = logicport+"VC4-" + aslot_temp;//VC4序号 
									
									//占用的VC12着色
									vc12_num = vc4_num+ "VC12-" + (int(aslot) - 63*aslot_temp);//VC12序号 
									//根据id获取VC12
									var follower1:Follower = curPortList.network_id.elementBox.getElementByID(vc12_num) as Follower;
									if(follower1 != null){
										//获取cell，设置颜色
										follower1.setStyle(Styles.INNER_OUTLINE_COLOR,9961367);	
										follower1.setStyle(Styles.INNER_COLOR,9961367);//绿色
										follower1.setClient("hasCC","true");
										if(circuitcode!=null&&circuitcode!="") {
										follower1.setStyle(Styles.INNER_OUTLINE_COLOR,59392);	
										follower1.setStyle(Styles.INNER_COLOR,59392);
										follower1.toolTip = circuitcode;
										}
									}
									
								}
								if(rate == "VC4"){
									//画一个占用100%的VC4
									var follower_num:String;//图片vc0序号
									follower_num = logicport + "vc0" + (int(aslot) - 1);
									var follower_tem:Follower = curPortList.network_id.elementBox.getElementByID(follower_num) as Follower;
									follower_tem.image = "vc4";
									follower_tem.setClient("flag","VC4$100");
									follower_tem.setClient("portcode",logicport);
									follower_tem.setClient("VC4",aslot);
									var vcUse:String = logicport + "vc_use" + (int(aslot) - 1);//时隙使用率序号
									var follower_tt:Follower = curPortList.network_id.elementBox.getElementByID(vcUse) as Follower;
									follower_tt.name = follower_tt.name.substr(0,6);
									follower_tt.name += "100%";
								}
						}
						
				}	
			}
			
			private function drawGrid(allvc4:int,logicport:String):void{			
				var xCount:int;//行数
				var yCount:int;//列数
				
				if(allvc4 == 4){//622M STM-4
					xCount = 2;
					yCount = 3;
				}
				else if(allvc4 == 1){//155M STM-1
					xCount = 1;
					yCount = 1;
				}
				else if(allvc4 == 16){//2.5G STM-16
					xCount = 6;
					yCount = 3;
				}
				else if(allvc4 == 64){//10G STM-64
					xCount = 22;
					yCount = 3;
				}
				
				
				var rowCount:int = 1;//grid行数
				var columnCount:int = 1;//grid列数
				var k:int = 0,grid_id:int = -1;//端口中VC4序号
				var xLocation:int,yLocation:int;//grid位置(x轴位置,y轴位置)
				
				//根据速率确定VC4个数,循环生成
				var i:int,j:int;//
				for(i = 0;i < xCount;i++){
					yLocation = 10+i*245;
					for(j = 0;j < yCount;j++){
						xLocation = 10+j*200;
						k += 1;
						grid_id += 1;
						if(grid_id == allvc4){
							break;
						}
						var grid_temp:Grid = curPortList.network_id.elementBox.getElementByID(logicport+"VC4-"+ grid_id) as Grid;
						if(grid_temp == null){
							var grid_1:Grid = new Grid();
							grid_1.setSize(190, 210);
							grid_1.setLocation(xLocation, yLocation);
							grid_1.setStyle(Styles.GRID_BORDER,0);
							grid_1.setStyle(Styles.GRID_FILL_COLOR,0x81c9ff);//0x00ffcc
							grid_1.setStyle(Styles.GRID_PADDING,0);
							grid_1.setStyle(Styles.GRID_CELL_DEEP,1);
							grid_1.setStyle(Styles.GRID_DEEP,1);
							grid_1.setStyle(Styles.GRID_ROW_COUNT,4);
							grid_1.setStyle(Styles.GRID_COLUMN_COUNT,1);
							grid_1.setStyle(Styles.GRID_ROW_PERCENTS,[0.1,0.1,0.8,0.1]);
							grid_1.setStyle(Styles.GRID_FILL,false);//网格是否填充		
							curPortList.network_id.elementBox.add(grid_1);
							
							var follower_1:Follower = new Follower();
							follower_1.setStyle(Styles.FOLLOWER_ROW_INDEX, 0);
							follower_1.setStyle(Styles.FOLLOWER_COLUMN_INDEX, 0);	
							follower_1.setStyle(Styles.INNER_STYLE,Consts.INNER_STYLE_SHAPE);
							follower_1.setStyle(Styles.LABEL_POSITION,Consts.POSITION_CENTER);	
							follower_1.image = "";
							follower_1.name = "VC4-"+ k;
							
							follower_1.setStyle(Styles.LABEL_BOLD,true);//是否使用粗体字体
							follower_1.setStyle(Styles.LABEL_FONT,"宋体");//字体
							follower_1.setStyle(Styles.LABEL_SIZE,14);//字体大小
							
							follower_1.host = grid_1;
							curPortList.network_id.elementBox.add(follower_1);
							
							var follower_2:Follower = new Follower(logicport + "vc_use" + grid_id);
							follower_2.setStyle(Styles.FOLLOWER_ROW_INDEX, 1);
							follower_2.setStyle(Styles.FOLLOWER_COLUMN_INDEX, 0);
							follower_2.setStyle(Styles.INNER_STYLE,Consts.INNER_STYLE_SHAPE);
							follower_2.setStyle(Styles.LABEL_POSITION,Consts.POSITION_CENTER);
							follower_2.setStyle(Styles.IMAGE_STRETCH,Consts.STRETCH_FILL);
							follower_2.image = "vc_use_bg";
							follower_2.name = "时隙使用率:0%";

							follower_2.setStyle(Styles.LABEL_COLOR,0x004B97);//字体颜色
							follower_2.setStyle(Styles.LABEL_FONT,"宋体");//字体
							follower_2.setStyle(Styles.LABEL_SIZE,13);//字体大小
							
							follower_2.host = grid_1;
							curPortList.network_id.elementBox.add(follower_2);
							
							
							var grid:Grid=new Grid(logicport+"VC4-"+ grid_id);
							grid.setLocation(xLocation, yLocation);
							grid.setSize(190, 134);
							grid.setStyle(Styles.FOLLOWER_ROW_INDEX, 2);
							grid.setStyle(Styles.FOLLOWER_COLUMN_INDEX, 0);
							grid.setStyle(Styles.GRID_BORDER, 20);
							grid.setStyle(Styles.GRID_CELL_DEEP,0);//单元格深度
							grid.setStyle(Styles.GRID_ROW_COUNT, rowCount);
							grid.setStyle(Styles.GRID_COLUMN_COUNT, columnCount);
							grid.setStyle(Styles.GRID_FILL,false);//网格是否填充		
							grid.host = grid_1;
							grid.name = "VC4-"+ k +"";
							curPortList.network_id.elementBox.add(grid);
							
							var follower_4:Follower = new Follower(logicport + "vc0" + grid_id);
							follower_4.setStyle(Styles.FOLLOWER_ROW_INDEX, 0);
							follower_4.setStyle(Styles.FOLLOWER_COLUMN_INDEX, 0);
							follower_4.image = "vc0";
							follower_4.setStyle(Styles.IMAGE_STRETCH,Consts.STRETCH_FILL);
							follower_4.host = grid;
							curPortList.network_id.elementBox.add(follower_4);
							
							var follower_3:Follower = new Follower();
							follower_3.setStyle(Styles.FOLLOWER_ROW_INDEX, 3);
							follower_3.setStyle(Styles.FOLLOWER_COLUMN_INDEX, 0);
							follower_3.image = "vc_foobg";
							follower_3.setStyle(Styles.IMAGE_STRETCH,Consts.STRETCH_FILL);
							follower_3.host = grid_1;
							curPortList.network_id.elementBox.add(follower_3);
						}	
					}
				}
			}
			private function drawFollower(rowCount:int,columnCount:int,grid1:twaver.Grid,grid_id:String,logicport:String,vc4:String):void{
				
				var num:int = 0;//序号
				var m:int,n:int;
				for(m = 0;m < rowCount;m++){					
					for(n = 0;n < columnCount;n++){
						num += 1;
						
						var follower1:Follower = curPortList.network_id.elementBox.getElementByID(grid_id+"VC12-" + num) as Follower;
						if(follower1 == null){
							var follower:Follower = new Follower(grid_id+"VC12-" + num);							
							follower.setStyle(Styles.FOLLOWER_ROW_INDEX, m);
							follower.setStyle(Styles.FOLLOWER_COLUMN_INDEX, n);
							
							follower.setStyle(Styles.INNER_STYLE,Consts.INNER_STYLE_SHAPE);
							follower.setStyle(Styles.LABEL_POSITION,Consts.POSITION_CENTER);	
							follower.image = "";
							follower.name = (num).toString();
							follower.setClient("flag","VC12");
							follower.setClient("portcode",logicport);
							follower.setClient("VC4",vc4);
							follower.host = grid1;
							curPortList.network_id.elementBox.add(follower);
						}
					}
					
				}
			}
			//属性
			private function ContexMenuItemSelect(evt:ContextMenuEvent):void{
				duanKouProperties = new viewEquipPackDuanKouPropertiesInfo();//定义弹出对话框（属性）	
				MyPopupManager.addPopUp(duanKouProperties, true);

			    var logicport =arrLogicport[curChildIndex]; 			
				var portPropertiesRO:RemoteObject = new RemoteObject("equipPack");
				portPropertiesRO.endpoint=ModelLocator.END_POINT;
				portPropertiesRO.getPortProperty(logicport);//查询数据				
				portPropertiesRO.showBusyCursor = true;	
				portPropertiesRO.addEventListener(ResultEvent.RESULT, generatePortProperties);		
			}
			// 给端口属性赋值
			private function generatePortProperties(event:ResultEvent):void{
				
				duanKouProperties.addEventListener("savePortInfo",saveportproperties);
				
				duanKouProperties.equipname.text=event.result.equipname;
				duanKouProperties.portserial.text=event.result.portserial
				duanKouProperties.frameserial.text=event.result.frameserial;
				duanKouProperties.remark.text=event.result.remark;
				duanKouProperties.slotserial.text=event.result.slotserial;
				duanKouProperties.updatedate.text=event.result.updatedate;
				duanKouProperties.updateperson.text=event.result.updateperson;
				duanKouProperties.logicport.text=event.result.logicport;
				duanKouProperties.connport.text=event.result.connport;
				duanKouProperties.packserial.text=event.result.packserial;
				
				var ppobj1:RemoteObject = new RemoteObject("equipPack");
				ppobj1.endpoint=ModelLocator.END_POINT;
				ppobj1.showBusyCursor=true;
				ppobj1.getFromXTBM("ZY030704_%");//查看端口类型
				ppobj1.addEventListener(ResultEvent.RESULT, function (e: ResultEvent):void{generatePortTypeInfo(e,event.result.y_porttype)});
				var ppobj2:RemoteObject = new RemoteObject("equipPack");
				ppobj2.endpoint=ModelLocator.END_POINT;
				ppobj2.showBusyCursor=true;
				ppobj2.getFromXTBM("ZY0701_%")// 端口速率
				ppobj2.addEventListener(ResultEvent.RESULT, function (e:ResultEvent):void{generatePortRateInfo(	e,event.result.x_capability)});
				var ppobj3:RemoteObject = new RemoteObject("equipPack");
				ppobj3.endpoint=ModelLocator.END_POINT;
				ppobj3.showBusyCursor=true;
				ppobj3.getFromXTBM("ZY131002_%")// 端口状态
				ppobj3.addEventListener(ResultEvent.RESULT, function(e:ResultEvent):void{generatePortStatusInfo(e,event.result.status)});	
			}
			private function generatePortTypeInfo(event:ResultEvent,type:String):void{
				var XMLData:XMLList = new XMLList(event.result.toString());
				duanKouProperties.y_porttype.dataProvider = XMLData.children();
				duanKouProperties.y_porttype.labelField = "@label";
				
				for each (var element:XML in duanKouProperties.y_porttype.dataProvider) {
					
					if(element.@label==type){
						
						duanKouProperties.y_porttype.selectedItem = element as Object;
					}
				}
			}
			private function generatePortRateInfo(event:ResultEvent,rate:String):void{
				var XMLData:XMLList = new XMLList(event.result.toString());
				duanKouProperties.x_capability.dataProvider = XMLData.children();
				duanKouProperties.x_capability.labelField = "@label";	
				
				for each (var element:XML in duanKouProperties.x_capability.dataProvider) {
					
					if(element.@label==rate){
						
						duanKouProperties.x_capability.selectedItem = element as Object;
					}
				}
			}
			private function generatePortStatusInfo(event:ResultEvent,status:String):void{
				var XMLData:XMLList = new XMLList(event.result.toString());
				duanKouProperties.portstatus.dataProvider = XMLData.children();
				duanKouProperties.portstatus.labelField = "@label";
				for each (var element:XML in duanKouProperties.portstatus.dataProvider) {					
					if(element.@label==status){						
						duanKouProperties.portstatus.selectedItem = element as Object;
					}
				}
			} 
			//属性更新
			private function saveportproperties(event:Event):void{
				var logicPort:LogicPort=new LogicPort();
				if(duanKouProperties.connport.text==""){
					logicPort.connport=" ";	
				}else{
					logicPort.connport=duanKouProperties.connport.text
				}
				logicPort.equipname=duanKouProperties.equipname.text;// 设备名称
				logicPort.frameserial=duanKouProperties.frameserial.text;//机框序号
				logicPort.packserial= duanKouProperties.packserial.text;
				logicPort.portserial=duanKouProperties.portserial.text;
				logicPort.slotserial=duanKouProperties.slotserial.text;
				logicPort.logicport=duanKouProperties.logicport.text;
				logicPort.remark=duanKouProperties.remark.text;
				logicPort.status=duanKouProperties.portstatus.selectedItem.@code;
				logicPort.updatedate=duanKouProperties.updatedate.text;
				logicPort.updateperson=duanKouProperties.updateperson.text;
				logicPort.x_capability=duanKouProperties.x_capability.selectedItem.@code;
				
				logicPort.y_porttype=duanKouProperties.y_porttype.selectedItem.@code;
				logicPort.equipcode=equipcode;
				var ppobj:RemoteObject = new RemoteObject("equipPack");
				ppobj.endpoint=ModelLocator.END_POINT;
				ppobj.showBusyCursor=true;
				ppobj.updatePortProperties(logicPort);
				ppobj.addEventListener(ResultEvent.RESULT, function (e: ResultEvent):void{
					if(e.result){
						Alert.show("更新成功","提示");
						MyPopupManager.removePopUp(duanKouProperties);  
					}else{
						Alert.show("后台发生错误，请重试","提示");
					}
				});	
			}
			//业务
			private function handlerContextMenuCarryOpera(evt:ContextMenuEvent):void{
				var itemCarryOperaInfo:CarryOpera = new CarryOpera();
				var	logicport = arrLogicport[curChildIndex];
				itemCarryOperaInfo.getOperaByCodeAndType(logicport,"logicport");
				MyPopupManager.addPopUp(itemCarryOperaInfo, false);
			}
			private  function setDataProvidePack(e:ResultEvent):void{
				XMLData = new XML(e.result.toString());				
				var orgData:ArrayCollection = new ArrayCollection();
				
				for each(var arrxml:XML in XMLData.children())
				{
					orgData.addItem(arrxml);
					
				}
			}	
		]]>
	</mx:Script>
	<mx:Canvas width="100%" height="100%">
		<mx:VBox id="panel" width="100%" height="100%"/>
	</mx:Canvas>
</mx:HBox>